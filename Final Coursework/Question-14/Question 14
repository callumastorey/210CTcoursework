###QUESTION 14###

class Vertex:
    """Class for the vertex attributes"""
    def __init__(self,n) :
        self.name = n #first of 2 parts for a vertex, this is the name
        self.neighbours = list() # This is the list of neighbours of the vertex

    def addNeighbour(self,v):
        if v not in self.neighbours:
            self.neighbours.append(v)
            self.neighbours.sort()

class Graph(object):
    """Class for the Graph vertices and edges"""
    def __init__(self):
        self.vertices = {} # The dictionary containing the vertices
    def addVertex(self, vertex):
        """Function to add vertices"""
        #if isinstance(vertex, Vertex) and vertex.name not in self.vertices: # Ensuring that the vertex trying to be added
        self.vertices[vertex.name] = vertex                             # is a vertex and does not already exist

    def addEdge(self,u,v):
        """Function to add edges"""
        if u in self.vertices and v in self.vertices: # Check to make sure the correct data has been given
            for key, value in self.vertices.items():
                if key == u:
                    value.addNeighbour(v)
                if key == v:
                    value.addNeighbour(u)
            return True # Succsessfully added an edge
        else:
            return False

    def printGraph(self):
        """Function to print graph"""
        for key in sorted(list(self.vertices.keys())):
            print(key + str(self.vertices[key].neighbours))

    def depthFirstSearch(self,Vertex):
        visited = []
        stack =[Vertex]
        while len(stack) > 0:
            x = stack.pop(0)
            if x not in visited:
                visited.append(x)
        print(visited)

    def breadthFirstSearch(self, Vertex):
        visited = []
        queue = []
        queue.append(Vertex)
        while len(queue) > 0:
            x = queue.pop(0)
            if x not in visited:
                visited.append(x)
            for i in x.neighbours:
                queue.append(self.vertices[i])
        print(visited)

g = Graph()
a = Vertex('A')
j = Vertex('J')
g.addVertex(Vertex('A'))
g.addVertex(Vertex('B'))
g.addVertex(Vertex('C'))
g.addVertex(Vertex('D'))
g.addVertex(Vertex('E'))
g.addVertex(Vertex('F'))
g.addVertex(Vertex('G'))
g.addVertex(Vertex('H'))
g.addVertex(Vertex('I'))
g.addVertex(Vertex('J'))

edges = ['AB','AE', 'BF', 'CG', 'DE', 'DH', 'EH', 'FG', 'FI','FJ', 'GJ', 'HI']
for edge in edges:
    g.addEdge(edge[:1], edge[1:])

g.printGraph()
g.depthFirstSearch(g.vertices)
g.breadthFirstSearch(g.vertices)

"""Description"""
"""
With question 14 we had to implement breadth first search and depth first search traversals into question 13s graph.
I did this through implementing both algorithms from pseuodcode into the graph class.

"""
